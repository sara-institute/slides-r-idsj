---
title: "[DATA VISUALIZATION<br>USING GGPLOT]{.r-fit-text}"
subtitle: "[2 Days Data Science Workshop at Institute of Development Studies, Jaipur (ICSSR)]{.r-fit-text}"
author: "DR. AJAY KUMAR KOLI, PHD"
pagetitle: "IDSJ"
format: 
  revealjs:
    background-transition: convex
    theme: [default, styles.scss]
    execute: 
      echo: true
controls: true
slide-number: true
scrollable: true
logo: images/logo-idsj.png
incremental: true
# theme: simple
# bibliography: references.bib
# theme: style.scss
title-slide-attributes:
  data-background-image: "https://images.unsplash.com/photo-1589304602243-e7f34d89fbd4?q=80&w=880&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  data-background-size: cover
  data-background-color: black
  data-background-opacity: "0.7"
  data-background-position: top
---

## 

<br>
<br>
<br>
<br>

> “The simple graph has brought more information to the data analyst’s mind than any other device.” — *John Tukey*

```{r}
#| label: packages-used2
#| echo: false
#| warning: false
#| message: false

library(emoji) #add emojis
library(countdown) #add countdown clock

library(tidyverse) 
library(palmerpenguins) #get penguins dataset
```


## Grammar of Graphics

:::: {.columns .centering}

::: {.column width="50%"}

<br>
<br>

![](images/logo-ggplot.png){width=50%}
:::

::: {.column width="50%"}
<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:7338353739184951296?collapsed=1" height="629" width="504" frameborder="0" allowfullscreen="" title="Embedded post"></iframe>
:::

::::


## {background-image=images/cake-ggplot.png background-size=contain visibility=hidden}

::: aside

[Source: [Tanya Shapiro](https://twitter.com/tanya_shapiro/status/1576935152575340544/photo/1)]{.small}

:::

## {background-image=images/layer3d.png background-size=contain background-color=#000 visibility=hidden}

## ggplot2 Layers {.centering}

![](images/layer00.png)

## Data: `penguins`

Live on three island: Biscoe, Dream, & Torgersen.

<br>

::: {layout="[[60,40], []]"}
![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png)
:::

::: aside
Source: [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

## Know Your Data

<br>

```{r}
glimpse(penguins)
```

## Import Data

::: {.panel-tabset}
### Task

![](images/layer1.png){width=40%}

### Code

```{r}
#| label: fig-data
#| eval: false

ggplot(data = penguins)
```

### Output

```{r }
#| label: fig-data
#| echo: false
```

:::

## Map Variables Aesthetics

::: {.panel-tabset}
### Task

![](images/layer2.png){width=40%}

### Code

```{r}
#| label: fig-var
#| eval: false
#| code-line-numbers: "2"

ggplot(data = penguins,
       mapping = aes(x = species))
```

### Output

```{r }
#| label: fig-var
#| echo: false
```

:::

## Add Geometric Shapes

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-geoms
#| eval: false
#| code-line-numbers: "3"

ggplot(data = penguins,
       mapping = aes(x = species)) +
  geom_bar()
```

### Output

```{r }
#| label: fig-geoms
#| echo: false
```

:::

## Key Components are:

<br>

1. Your **data set**,

1. A set of **aesthetic mappings** between variables in the data and visual properties, and

1. At least one layer which describes how to render each observation. Layers are usually created with a **geom function**.

## `r emo::ji("brain")` YOUR TURN {background-color=brown}

::: {.panel-tabset}
### Task

```{r }
#| label: your-turn1
#| echo: false
```

### Answer

```{r}
#| label: your-turn1
#| eval: false
#| echo: true

ggplot(data = penguins,
       mapping = aes(x = island)) +
  geom_bar()
```

:::

```{r echo=FALSE}
countdown(minutes = 5,
          play_sound = TRUE,
          top = "-5%",
          font_size = "2em")
```

## Common Mistakes {background-color=seagreen}

-   Make sure that every `(` is **matched** with a `)` and every `"` is paired with another `"`.

-   Console shows no results but a `+` sign that means your code is incomplete and R is **waiting** for you to complete the code.

-   in ggplot `+` has to come at the **end of the line**, not the start

## "Fill" Color

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-fill-colr
#| eval: false
#| code-line-numbers: "3"

ggplot(data = penguins,
       mapping = aes(x = species)) +
  geom_bar(fill = "blue")
```

### Output

```{r }
#| label: fig-fill-colr
#| echo: false
```

:::

## "Fill" Colors

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-colrs
#| eval: false
#| code-line-numbers: "3"

ggplot(data = penguins,
       mapping = aes(x = species)) +
  geom_bar(fill = c("blue", "green", "yellow"))
```

### Output

```{r }
#| label: fig-colrs
#| echo: false
```

:::

## "Fill" & "Color" Colors

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-color-colr
#| eval: false
#| code-line-numbers: "3-5"

ggplot(data = penguins,
       mapping = aes(x = species)) +
  geom_bar(fill = c("blue", "green", "yellow"),
           color = "black",
           size = 5)
```

### Output

```{r }
#| label: fig-color-colr
#| echo: false
```

:::

## `r emo::ji("brain")` YOUR TURN {background-color=brown}

::: {.panel-tabset}
### Task

```{r }
#| label: your-turn2
#| echo: false
```

### Answer

```{r}
#| label: your-turn2
#| eval: false
#| echo: true

ggplot(data = penguins,
       mapping = aes(x = island)) +
  geom_bar(fill = c("red", "yellow", "darkgreen"),
           color = "black")
```

:::

```{r echo=FALSE}
countdown(minutes = 5,
          play_sound = TRUE,
          top = "-5%",
          font_size = "2em")
```

## Plot A Continuous Variable

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-cont-var
#| eval: false
#| code-line-numbers: "4,5"

# bill_length_mm is dbl type variable/column

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm)) +
  geom_histogram()
```

### Output

```{r }
#| label: fig-cont-var
#| echo: false
```

:::

## `r emo::ji("brain")` YOUR TURN {background-color=brown}

::: {.panel-tabset}
### Task

```{r }
#| label: your-turn3
#| echo: false
```

### Answer

```{r}
#| label: your-turn3
#| eval: false
#| echo: true

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm)) +
  geom_histogram(fill = "darkblue",
                 color = "white")
```

:::

```{r echo=FALSE}
countdown(minutes = 5,
          play_sound = TRUE,
          top = "-5%",
          font_size = "2em")
```

## Two Continuous Variables

::: {.panel-tabset}
### Task

![](images/layer3.png){width=40%}

### Code

```{r}
#| label: fig-cont-vars
#| eval: false
#| code-line-numbers: "2,3"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()
```

### Output

```{r }
#| label: fig-cont-vars
#| echo: false
```

:::

## Geom Size

::: {.panel-tabset}
### Task

```{r echo=FALSE}
sizes <- expand.grid(size = (0:3) * 2, stroke = (0:3) * 2)
ggplot(sizes, aes(size, stroke, size = size, stroke = stroke)) +
  geom_abline(slope = -1, intercept = 6, colour = "white", linewidth = 6) +
  geom_point(shape = 21, fill = "red") +
  scale_size_identity()
```

### Code

```{r}
#| label: fig-geom-size
#| eval: false
#| code-line-numbers: "3"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(size = 5)
```

### Output

```{r }
#| label: fig-geom-size
#| echo: false
```

:::

## Geom Shape

::: {.panel-tabset}
### Task

```{r echo=FALSE}
shapes <- data.frame(
  shape = c(0:19, 22, 21, 24, 23, 20),
  x = 0:24 %/% 5,
  y = -(0:24 %% 5)
)
ggplot(shapes, aes(x, y)) +
  geom_point(aes(shape = shape), size = 5, fill = "red") +
  geom_text(aes(label = shape), hjust = 0, nudge_x = 0.15) +
  scale_shape_identity() +
  expand_limits(x = 4.1) +
  theme_void()
```


### Code

```{r}
#| label: fig-geom-shp
#| eval: false
#| code-line-numbers: "4"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(size = 5,
             shape = 8)
```

### Output

```{r }
#| label: fig-geom-shp
#| echo: false
```

:::

## `r emo::ji("brain")` YOUR TURN {background-color=brown}

::: {.panel-tabset}
### Task

```{r }
#| label: your-turn4
#| echo: false
```

### Answer

```{r}
#| label: your-turn4
#| eval: false
#| echo: true

ggplot(data = penguins,
       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(size = 2, shape = 23, color = "red", fill = "gold")
```

:::

```{r echo=FALSE}
countdown(minutes = 5,
          play_sound = TRUE,
          top = "-5%",
          font_size = "2em")
```

## Plot Two Factors/Categorical

::: {.panel-tabset}
### Task

> Sometimes, we want to differentiate values of a factor/category variable on the basis of another factor/category variable.

### Code

```{r}
#| label: fig-fct-fct
#| eval: false
#| code-line-numbers: "4"

ggplot(data = penguins,
       mapping = aes(x = island)) +
  geom_bar(aes(fill = sex))
```

### Output

```{r }
#| label: fig-fct-fct
#| echo: false
```

:::

## Plot a Continuous and Factor

::: {.panel-tabset}
### Task

> Sometimes, we want to differentiate values from a continuous variable on the basis of factor/category variables.

### Code

```{r}
#| label: fig-fct-int
#| eval: false
#| code-line-numbers: "4"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm)) +
  geom_histogram(aes(fill = sex),
                 color = "black")
```

### Output

```{r }
#| label: fig-fct-int
#| echo: false
```

:::

## Two Continuous & a Factor

::: {.panel-tabset}
### Task

> Visualize how the bill length and bill depth relationship varies between male and female penguins.

### Code

```{r}
#| label: fig-fct-2cont
#| eval: false
#| code-line-numbers: "2,3"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = sex))
```

### Output

```{r }
#| label: fig-fct-2cont
#| echo: false
```

:::

## Two Continuous & a Factor

::: {.panel-tabset}
### Task

> Visualize how the bill length and bill depth relationship varies among three penguin species.

### Code

```{r}
#| label: fig-fct-2cont2
#| eval: false
#| code-line-numbers: "2,3"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species))
```

### Output

```{r }
#| label: fig-fct-2cont2
#| echo: false
```

:::

## Write Labels

::: {.panel-tabset}
### Task

- **Title** of the plot

- **Subtitle** of the plot with more information

- Title of the **x-axis**

- Title of the **y-axis**

### Code

```{r}
#| label: fig-lbs
#| eval: false
#| code-line-numbers: "4-9"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species)) +
  labs(
    title = "The title of the plot",
    subtitle = "The subtitle of the plot",
    x = "Bill length (mm)",
    y = "Bill depth (mm)"
  )
```

### Output

```{r }
#| label: fig-lbs
#| echo: false
```

:::

## Different Shapes

::: {.panel-tabset}
### Task

> Each level of the factor/category can be shown using a different shape of different color.

### Code

```{r}
#| label: fig-fct-shps
#| eval: false
#| code-line-numbers: "3"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    title = "The title of the plot",
    subtitle = "The subtitle of the plot",
    x = "Bill length (mm)",
    y = "Bill depth (mm)"
  )
```

### Output

```{r }
#| label: fig-fct-shps
#| echo: false
```

:::

# ggplot Extension Packages {background-color=teal}

## GGThemes

:::: {.panel-tabset}
### Task

> Additional themes, scales, and geoms for ggplot2

```{r}
#install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
```

<br>
<br>

Source: Learn more about [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) & [ggthemes tutorial](https://jrnold.github.io/ggthemes/)


### Code

```{r}
#| label: fig-theme-eco
#| eval: false
#| code-line-numbers: "10"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    title = "The title of the plot",
    subtitle = "The subtitle of the plot",
    x = "Bill length (mm)",
    y = "Bill depth (mm)"
  ) +
  theme_economist()
```

### Output

```{r }
#| label: fig-theme-eco
#| echo: false
```

::::

## Theme Solarized

::: {.panel-tabset}
### Task


### Code

```{r}
#| label: fig-theme-solar
#| eval: false
#| code-line-numbers: "10"

billplot <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    title = "The title of the plot",
    subtitle = "The subtitle of the plot",
    x = "Bill length (mm)",
    y = "Bill depth (mm)"
  ) 



billplot + theme_solarized_2()
```

### Output

```{r }
#| label: fig-theme-solar
#| echo: false
```

:::

## Theme Tufte

::: {.panel-tabset}
### Task



### Code

```{r}
#| label: fig-theme-tufte
#| eval: false

billplot + theme_tufte()
```

### Output

```{r }
#| label: fig-theme-tufte
#| echo: false
```

:::

## Theme Clean

::: {.panel-tabset}
### Task



### Code

```{r}
#| label: fig-theme-clean
#| eval: false

billplot + theme_clean()
```

### Output

```{r }
#| label: fig-theme-clean
#| echo: false
```

:::

## 🎨 Color Palette

::: {.panel-tabset}
### Task

> R package `ggthemes` have function to use color scheme for colorblindness. [Know more](https://rdrr.io/cran/ggthemes/man/colorblind.html)

### Code

```{r}
#| label: fig-col-blind
#| eval: false

billplot + 
      theme_clean() + 
      scale_color_colorblind()
```

### Output

```{r }
#| label: fig-col-blind
#| echo: false
```

:::


## Color Palette {.center}

![](https://r-graph-gallery.com/38-rcolorbrewers-palettes_files/figure-html/thecode-1.png)


## Color Palette RColorBrewer

::: {.panel-tabset}
### Task

```{r}
library(RColorBrewer)
```

### Code

```{r}
#| label: fig-col-palt
#| eval: false
#| code-line-numbers: "11"

billplot +
  theme_clean() +
  scale_color_brewer(palette = "Dark2")
```

### Output

```{r }
#| label: fig-col-palt
#| echo: false
```

:::

## Color Palette Wesanderson

::: {.panel-tabset}
### Task

```{r}
library(wesanderson)

names(wes_palettes)
```

### Code

```{r}
#| label: fig-col-wes
#| eval: false

billplot +
  theme_clean() +
  scale_color_manual(values = wes_palette("BottleRocket2", n = 3))
```

### Output

```{r }
#| label: fig-col-wes
#| echo: false
```

:::

## Export Plot

::: {.panel-tabset}
### Task

> Export/save plot as pdf, jpg or png file.

### Code

```{r}
#| label: fig-save
#| eval: false
#| code-line-numbers: "13"

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    title = "The title of the plot",
    subtitle = "The subtitle of the plot",
    x = "Bill length (mm)",
    y = "Bill depth (mm)"
  ) +
  theme_clean() +
  scale_color_manual(values = wes_palette("BottleRocket2", n = 3))

ggsave("penguins-plot.pdf")
```

### Output

```{r }
#| label: fig-save
#| echo: false
```

:::

# {.centering}

[🧑🏽‍💻👨🏽‍💻<br>Question & Answer]{.r-fit-text}

## 🤯 Your Turn {background-color=brown} 

### 1. What is ggplot2 used for in R?

::: {.nonincremental}
A) Data cleaning
B) Data visualization
C) Text mining
D) Machine learning  
:::

## 🤯 Your Turn {background-color=brown} 

### 2.  In ggplot2, the function aes() is used for:

::: {.nonincremental}
A) Loading data
B) Mapping variables to aesthetics like x, y, color
C) Saving plots as images
D) Applying statistical models  
:::

## 🤯 Your Turn {background-color=brown} 

### 3. Which function is used to create a scatter plot in ggplot2?

::: {.nonincremental}
A) geom_bar()
B) geom_line()
C) geom_point()
D) geom_boxplot()  
:::

## 🤯 Your Turn {background-color=brown} 

### 4. In ggplot2, theme_minimal() is used to:

::: {.nonincremental}
A) Filter the dataset
B) Apply a clean, minimal plot style
C) Add a legend
D) Change axis limits

:::
## 🤯 Your Turn {background-color=brown} 

### 5. Which package must be loaded to use ggplot2 functions?

::: {.nonincremental}
A) dplyr
B) ggplot2
C) tidyr
D) plotly  
:::

## 🤩 Your Turn Answers {background-color=seagreen}

1. Correct answer: B) Data visualization

1. Correct answer: B) Mapping variables to aesthetics like x, y, color

1. Correct answer: C) geom_point()

1. Correct answer: B) Apply a clean, minimal plot style

1. Correct answer: B) ggplot2


# {background-image=https://images.unsplash.com/photo-1547414912-6fe761a1d88a?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D background-size=cover}

:::: {.columns}

::: {.column width="50%"}
[thank You!]{.theme-cursive .r-fit-text}
[IDSJ TEAM]{.r-fit-text}
:::

::: {.column width="50%"}

:::

::::






